#Configure operations that are common between the Spindle and Spindle-client configurations
#Network port and local storage location
DEFAULT_PORT=21940
DEFAULT_LOC='$TMPDIR'
AC_ARG_WITH(default-port,
            [AS_HELP_STRING([--with-default-port=NUM],[TCP Port for Spindle server communication])],
            [SPINDLE_PORT=${withval}],
            [SPINDLE_PORT=$DEFAULT_PORT])
AC_ARG_WITH(localstorage,
            [AS_HELP_STRING([--with-localstorage=DIR],[Directory on back-ends for storing relocated files])],
            [SPINDLE_LOC=${withval}],
            [SPINDLE_LOC=$DEFAULT_LOC])
AC_DEFINE_UNQUOTED([SPINDLE_PORT],[$SPINDLE_PORT],[The default port for Spindle])
AC_DEFINE_UNQUOTED([SPINDLE_LOC],"[$SPINDLE_LOC]",[The default local directory for Spindle])

#Runmode detection (pipe/socket or cobo/msocket communications)
CLIENT_SERVER_COM=pipes
SERVER_SERVER_COM=cobo
AC_ARG_ENABLE(pipes,
              [AS_HELP_STRING([--enable-pipes],[Use pipes for server/client communication])],
              [CLIENT_SERVER_COM=pipes;],)
AC_ARG_ENABLE(socket,
              [AS_HELP_STRING([--enable-socket],[Use sockets for server/client communication])],
              [CLIENT_SERVER_COM=sockets;],)
AC_ARG_ENABLE(shmem,
              [AS_HELP_STRING([--enable-shmem],[Use shared memory for server/client communication])],
              [CLIENT_SERVER_COM=shmem;],)

AC_ARG_ENABLE(msocket,
              [AS_HELP_STRING([--enable-msocket],[Use msocket for inter-server communication])],
              [SERVER_SERVER_COM=msocket;],)
AC_ARG_ENABLE(cobo,
              [AS_HELP_STRING([--enable-cobo],[Use msocket for inter-server communication])],
              [SERVER_SERVER_COM=cobo;],)

AM_CONDITIONAL([LMON_DYNAMIC], [test "x$LAUNCHMON_STATIC_LIBS" == "x"])
AM_CONDITIONAL([PIPES], [test x$CLIENT_SERVER_COM == xpipes])
AM_CONDITIONAL([SOCKETS], [test x$CLIENT_SERVER_COM == xsocket])
AM_CONDITIONAL([SHMEM], [test x$CLIENT_SERVER_COM == xshmem])
AM_CONDITIONAL([MSOCKET], [test x$SERVER_SERVER_COM == xmsocket])
AM_CONDITIONAL([COBO], [test x$SERVER_SERVER_COM == xcobo])

if test "x$CLIENT_SERVER_COM" == "xpipes"; then
  AC_DEFINE([COMM_PIPES],[1],[Define if were using pipes for client/server communication])
fi
if test "x$CLIENT_SERVER_COM" == "xsocket"; then
  AC_DEFINE([COMM_SOCKET],[1],[Define if were using sockets for client/server communication])
fi
if test "x$SERVER_SERVER_COM" == "xmsocket"; then
  AC_DEFINE([COMM_MSOCKET],[1],[Define if were using msocket for server/server communication])
fi
if test "x$SERVER_SERVER_COM" == "xcobo"; then
  AC_DEFINE([COMM_COBO],[1],[Define if were using cobo for server/server communication])
fi
AC_DEFINE([NUM_COBO_PORTS],[25],[Number of ports for COBO to search for an open port])

AC_MSG_NOTICE([Communication is $CLIENT_SERVER_COM/$SERVER_SERVER_COM])

#Architecture detection
if test "x$target_cpu" == "xx86_64"; then
  AC_DEFINE([arch_x86_64],[1],[Define if we're compiling for an x86_64 target])
fi
if test "x$target_cpu" == "xppc64"; then
  AC_DEFINE([arch_ppc64],[1],[Define if we're compiling for a ppc64 target])
fi
if test "x$target_cpu" == "xpowerpc64"; then
  AC_DEFINE([arch_ppc64],[1],[Define if we're compiling for a ppc64 target])
fi
if test "x$target_cpu" == "xppc32"; then
  AC_DEFINE([arch_ppc32],[1],[Define if we're compiling for a ppc64 target])
fi
if test "x$target_cpu" == "xpowerpc32"; then
  AC_DEFINE([arch_ppc32],[1],[Define if we're compiling for a ppc64 target])
fi

AM_CONDITIONAL([BGQ_BLD], [test "x$target_os" == "xcnk"])
AM_CONDITIONAL([LINUX_BLD], [test "x$target_os" == "xlinux-gnu"])

#Python prefix
AC_ARG_WITH(python-prefix,
            [AS_HELP_STRING([--with-python-prefix=STR],[List of directories containing python installs])],
            [PYTHON_INST_PREFIX=${withval}],
            [PYTHON_INST_PREFIX=/usr/lib/python:/usr/lib64/python])
AC_DEFINE_UNQUOTED([PYTHON_INST_PREFIX],"[$PYTHON_INST_PREFIX]",[Python installation prefixes])

#Usage logging
AC_ARG_WITH(usage-logging,
            [AS_HELP_STRING([--with-usage-logging=FILE],[File for writing usage logs])],
            [USAGE_LOGS=${withval}])
if test "x$USAGE_LOGS" != "x"; then
  AC_DEFINE_UNQUOTED([USAGE_LOGGING_FILE],"[$USAGE_LOGS]",[The file for storing usage logs])
fi

#BlueGene detection
if test "x$target_os" == "xcnk"; then
CC_HOLD=$CC
CC=$MPICC
LX_DETECT_BLUEGENE
CC=$CC_HOLD
fi

#Linux detection
if (( "x$target_os" == "xlinux" || "x$target_os" == "xlinux-gnu" )); then
AC_DEFINE([os_linux],[1],[Define if we're compiling for a linux target])
fi
