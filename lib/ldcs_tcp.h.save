#ifndef VTS_RAWTCP_H
#define VTS_RAWTCP_H
#include "vts.h"

#ifdef WIN32
typedef unsigned int 	uint32_t;
#endif

int _vts_rawtcp_vclient(vts_connection *vtsc, va_list ap);
int _vts_rawtcp_vserver(vts_connection *vtsc, va_list ap);
int _vts_rawtcp_close(vts_connection *vtsc, char *text);
vts_connection *_vts_rawtcp_collective(int size, vts_connection **vtsc, char *text);
vts_connection *_vts_rawtcp_accept(vts_connection *vtsc, int timeout, char *text);
int _vts_rawtcp_send(vts_connection *vtsc, int rank, const void *data, int size, int timeout, char *text);
int _vts_rawtcp_recv(vts_connection *vtsc, int *rank, void *data, int size, int timeout, char *text);
int _vts_rawtcp_get_fd(vts_connection *vtsc, int rank, char *text);
int _vts_rawtcp_get_port(vts_connection *vtsc, char *text);
int _vts_rawtcp_set_fd_set(vts_connection *vtsc, fd_set *fds, char *text);
int _vts_rawtcp_fd_isset(vts_connection *vtsc, fd_set *fds, char *text);
int _vts_rawtcp_after_raw_accept(vts_connection *vtsc, int newfd, int timeout, char *text);

int _vts_rawtcp_raw_accept(int fd, int timeout, char *text);
int _vts_rawtcp_raw_recv(int fd, void *data, int size, int plooflag, int timeout, char *text);
int _vts_rawtcp_raw_send(int fd, const void *data, int size, int timeout, char *text);

void _vts_socket_init(void);
int _vts_rawtcp_tune(int sd, char *text);
void _vts_rawtcp_show_tune(FILE *out, int sd);
int _vts_rawtcp_fcntl(int fd, int flag, char *text);
int _vts_rawtcp_eof(int fd, char *text);
int _vts_rawtcp_wait_for(int fd, int timeout, char *text);
int _vts_rawtcp_sethostaddr(struct sockaddr_in *addr, char *hostname, int port);
#endif
